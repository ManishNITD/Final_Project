// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package manish.metrics

@SerialVersionUID(0L)
final case class NewMetric(
    metricName: _root_.scala.Predef.String = "",
    value: _root_.scala.Double = 0.0,
    timestamp: _root_.scala.Predef.String = "",
    host: _root_.scala.Predef.String = "",
    region: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NewMetric] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = metricName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = value
        if (__value != 0.0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(2, __value)
        }
      };
      
      {
        val __value = timestamp
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = host
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = region
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = metricName
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = value
        if (__v != 0.0) {
          _output__.writeDouble(2, __v)
        }
      };
      {
        val __v = timestamp
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = host
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = region
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withMetricName(__v: _root_.scala.Predef.String): NewMetric = copy(metricName = __v)
    def withValue(__v: _root_.scala.Double): NewMetric = copy(value = __v)
    def withTimestamp(__v: _root_.scala.Predef.String): NewMetric = copy(timestamp = __v)
    def withHost(__v: _root_.scala.Predef.String): NewMetric = copy(host = __v)
    def withRegion(__v: _root_.scala.Predef.String): NewMetric = copy(region = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = metricName
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = value
          if (__t != 0.0) __t else null
        }
        case 3 => {
          val __t = timestamp
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = host
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = region
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(metricName)
        case 2 => _root_.scalapb.descriptors.PDouble(value)
        case 3 => _root_.scalapb.descriptors.PString(timestamp)
        case 4 => _root_.scalapb.descriptors.PString(host)
        case 5 => _root_.scalapb.descriptors.PString(region)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: manish.metrics.NewMetric.type = manish.metrics.NewMetric
    // @@protoc_insertion_point(GeneratedMessage[manish.NewMetric])
}

object NewMetric extends scalapb.GeneratedMessageCompanion[manish.metrics.NewMetric] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[manish.metrics.NewMetric] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): manish.metrics.NewMetric = {
    var __metricName: _root_.scala.Predef.String = ""
    var __value: _root_.scala.Double = 0.0
    var __timestamp: _root_.scala.Predef.String = ""
    var __host: _root_.scala.Predef.String = ""
    var __region: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __metricName = _input__.readStringRequireUtf8()
        case 17 =>
          __value = _input__.readDouble()
        case 26 =>
          __timestamp = _input__.readStringRequireUtf8()
        case 34 =>
          __host = _input__.readStringRequireUtf8()
        case 42 =>
          __region = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    manish.metrics.NewMetric(
        metricName = __metricName,
        value = __value,
        timestamp = __timestamp,
        host = __host,
        region = __region,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[manish.metrics.NewMetric] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      manish.metrics.NewMetric(
        metricName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        host = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        region = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MetricsProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MetricsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = manish.metrics.NewMetric(
    metricName = "",
    value = 0.0,
    timestamp = "",
    host = "",
    region = ""
  )
  implicit class NewMetricLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, manish.metrics.NewMetric]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, manish.metrics.NewMetric](_l) {
    def metricName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.metricName)((c_, f_) => c_.copy(metricName = f_))
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.value)((c_, f_) => c_.copy(value = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def host: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.host)((c_, f_) => c_.copy(host = f_))
    def region: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.region)((c_, f_) => c_.copy(region = f_))
  }
  final val METRICNAME_FIELD_NUMBER = 1
  final val VALUE_FIELD_NUMBER = 2
  final val TIMESTAMP_FIELD_NUMBER = 3
  final val HOST_FIELD_NUMBER = 4
  final val REGION_FIELD_NUMBER = 5
  def of(
    metricName: _root_.scala.Predef.String,
    value: _root_.scala.Double,
    timestamp: _root_.scala.Predef.String,
    host: _root_.scala.Predef.String,
    region: _root_.scala.Predef.String
  ): _root_.manish.metrics.NewMetric = _root_.manish.metrics.NewMetric(
    metricName,
    value,
    timestamp,
    host,
    region
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[manish.NewMetric])
}
